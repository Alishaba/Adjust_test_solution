import uuid
import matplotlib.pyplot as plt
import pandas as pd
import psycopg2
import sqlalchemy as db
from flask import Flask, request, jsonify
from sqlalchemy import MetaData
from sqlalchemy import create_engine
from sqlalchemy import func
from sqlalchemy import select
from sqlalchemy.engine.url import URL
from sqlalchemy.sql import and_

# Prepare connection to the database
postgres_db = {'drivername': 'postgres',
               'username': 'postgres',
               'host': 'localhost',
               'port': 5422}
db_uri = URL(**postgres_db)
engine = create_engine(db_uri, echo=False)

# Connect and obtain results by ORM
conn = engine.connect()
trans = conn.begin()
meta = MetaData()

installs_by_country = db.Table('installs_by_country', meta, autoload=True, autoload_with=engine)
query = select(
    [installs_by_country.c.country, func.sum(installs_by_country.c.installs).label("Sum_of_paid_installs")]).group_by(
    installs_by_country.c.country).where(
    and_(installs_by_country.c.paid == True, installs_by_country.c.created_at.like('2019-05%'))).order_by(
    "Sum_of_paid_installs")
ResultProxy = conn.execute(query)
ResultSet = ResultProxy.fetchall()

df = pd.DataFrame(ResultSet, columns=ResultProxy.keys())
df.plot(kind='bar', ylim=(0.95 * min(df['Sum_of_paid_installs']), 1.05 * max(df['Sum_of_paid_installs'])),
        figsize=(20, 10))
plt.ylabel('Amount of paid installs in May 2019')
plt.xlabel('country')
plt.xticks(df.index, df.country)
plt.show()

# Connect and obtain results by SQL query
conn2 = psycopg2.connect(host="localhost", port='5422', database='postgres', user='postgres')
cur = conn2.cursor()
cur.execute("SELECT country, SUM(installs) AS Sum_of_paid_installs FROM installs_by_country WHERE "
            "((created_at LIKE '2019-05%') AND (paid=True)) GROUP BY country ORDER BY Sum_of_paid_installs")
rows = cur.fetchall()

df2 = pd.DataFrame(rows, columns=['columns', 'Sum_of_paid_installs'])

cur.close()

# Create a web server with Flask
app = Flask(__name__, static_url_path='/files', static_folder='files')


@app.route("/")
def hello():
    return 'Hello! Welcome to my solution please go to http://0.0.0.0:5000/by-orm or http://0.0.0.0:5000/by-query ' \
           'to see the results'


@app.route("/by-orm")
def get_results_with_orm():
    # Plot the amount of installs per country for May 2019
    random_name = f"files/fig-{uuid.uuid4()}.png"
    df.plot(kind='bar', ylim=(0.95 * min(df['Sum_of_paid_installs']), 1.05 * max(df['Sum_of_paid_installs'])),
            figsize=(20, 10))
    plt.ylabel('Amount of paid installs in May 2019')
    plt.xlabel('country')
    plt.xticks(df.index, df.country)
    plt.title('Results generated by ORM')
    plt.savefig(random_name)
    return jsonify(Action='Please click the link below', figure=f"{request.url_root}{random_name}")


@app.route("/by-query")
def get_results_by_query():
    random_name = f"files/fig-{uuid.uuid4()}.png"
    df2.plot(kind='bar', ylim=(0.95 * min(df2['Sum_of_paid_installs']), 1.05 * max(df2['Sum_of_paid_installs'])),
             figsize=(20, 10))
    plt.ylabel('Amount of paid installs in May 2019')
    plt.xlabel('country')
    plt.xticks(df.index, df.country)
    plt.title('Results generated by SQL query')
    plt.savefig(random_name)
    return jsonify(Action='Please click the link below', figure=f"{request.url_root}{random_name}")


if __name__ == '__main__':
    try:
        app.run(host="0.0.0.0")
    except KeyboardInterrupt as _:
        conn.close()
        conn2.close()
